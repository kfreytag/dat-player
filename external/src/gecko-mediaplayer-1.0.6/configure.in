dnl Process this file with autoconf to produce a configure script.
dnl Created by Anjuta application wizard.

AC_INIT(configure.in)
AM_INIT_AUTOMAKE(gecko-mediaplayer, 1.0.6)
AM_CONFIG_HEADER(config.h)
AM_MAINTAINER_MODE([enable])
m4_ifdef([AM_SILENT_RULES], [AM_SILENT_RULES([yes])])

AC_ISC_POSIX
AC_PROG_CC
AM_PROG_CC_STDC
AC_HEADER_STDC


AC_PROG_CPP
AC_PROG_CXX
AM_PROG_CC_C_O
AC_PROG_RANLIB

dnl Set gettext package name
GETTEXT_PACKAGE=gecko-mediaplayer
AC_SUBST(GETTEXT_PACKAGE)
AC_DEFINE_UNQUOTED(GETTEXT_PACKAGE,"$GETTEXT_PACKAGE", [GETTEXT package name])

dnl Add the languages which your application supports here.
ALL_LINGUAS="cs de es fr ja it nl pl pt pt_BR tr"
AM_GLIB_GNU_GETTEXT

PKG_CHECK_MODULES(GLIB, [glib-2.0])
AC_SUBST(GLIB_CFLAGS)
AC_SUBST(GLIB_LIBS)

PKG_CHECK_MODULES(GMLIB, [gmlib >= 1.0.5])
AC_SUBST(GMLIB_CFLAGS)
AC_SUBST(GMLIB_LIBS)


AC_ARG_WITH([xulrunner-sdk],
    [AS_HELP_STRING([--with-xulrunner-sdk=path_to_sdk],
        [Path to xulrunner SDK for build --with-xulrunner-sdk=/path/to/sdk])],
        [
	XULRUNNER_SDK_PREFIX=$with_xulrunner_sdk
	GECKO_CFLAGS="-I$XULRUNNER_SDK_PREFIX/include -I$XULRUNNER_SDK_PREFIX/include/plugin -I$XULRUNNER_SDK_PREFIX/include/nspr -I$XULRUNNER_SDK_PREFIX/include/xpcom -I$XULRUNNER_SDK_PREFIX/include/string -I$XULRUNNER_SDK_PREFIX/include/java"
	GECKO_LIBS="-L$XULRUNNER_SDK_PREFIX/lib -lxpcomglue_s -lxul -lxpcom -lplds4 -lplc4 -lnspr4 -lpthread -ldl"
	],
        [])

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [libxul >= 2],[GECKO_CFLAGS="$GECKO_CFLAGS -DMOZ_NO_MOZALLOC"
        AC_MSG_NOTICE([Using libxul >= 2.0 ]) 
    ],[AC_MSG_NOTICE([libxul >= 2 not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [libxul >= 1.9.2],[ AC_MSG_NOTICE([Using libxul >= 1.9.2])
    ],[AC_MSG_NOTICE([libxul >= 1.9.2 not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [libxul < 1.9.2],[ AC_MSG_NOTICE([Using libxul < 1.9.2])
    ],[AC_MSG_WARN([libxul < 1.9.2 not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [libxul-unstable],[ AC_MSG_NOTICE([Using libxul-unstable])
    ],[AC_MSG_WARN([libxul-unstable not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [mozilla-plugin mozilla-xpcom],[ AC_MSG_NOTICE([Using mozilla])
    ],[AC_MSG_WARN([mozilla-plugin not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [firefox-plugin firefox-xpcom],[ AC_MSG_NOTICE([Using firefox])
    ],[AC_MSG_WARN([firefox-plugin not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [seamonkey-plugin seamonkey-xpcom],[ AC_MSG_NOTICE([Using seamonkey])
    ],[AC_MSG_WARN([seamokey-plugin not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [xulrunner-plugin xulrunner-xpcom],[ AC_MSG_NOTICE([Using xulrunner])
    ],[AC_MSG_WARN([xulrunner-plugin not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [iceape-plugin iceape-xpcom],[ AC_MSG_NOTICE([Using iceape])
    ],[AC_MSG_WARN([iceape-plugin not found, trying another])])
fi

if test "$GECKO_CFLAGS" = ""; then
PKG_CHECK_MODULES(GECKO, [npapi-sdk],[ AC_MSG_NOTICE([Using npapi-sdk])
    ],[AC_MSG_ERROR([npapi-sdk not found, all out ot tries])])
    require_nspr="yes"
fi

AC_MSG_CHECKING([for const return value of NPP_GetMIMEDescription])
oCFLAGS=$CFLAGS
CFLAGS="$GECKO_CFLAGS"
AC_LANG_PUSH([C])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
#ifndef XP_UNIX
#define XP_UNIX 1
#endif
#include <npapi.h>
#if NP_VERSION_MAJOR == 0 && NP_VERSION_MINOR < 27
#error
#else
const char*NPP_GetMIMEDescription(void) {
  return "test";
}
#endif
],[
const char *f=NPP_GetMIMEDescription();
])],[
    AC_MSG_RESULT([yes])
    AC_DEFINE([NPAPI_USE_CONSTCHARS],[1],[Define if NPAPI declares NPP_GetMIMEDescription as a const char*])
],[
    AC_MSG_RESULT([no])
])
AC_LANG_POP([C])
CFLAGS=$oCFLAGS

AC_MSG_CHECKING([for usage of UTF8Characters])
oCFLAGS=$CFLAGS
CFLAGS="$GECKO_CFLAGS"
AC_LANG_PUSH([C])
AC_COMPILE_IFELSE([AC_LANG_PROGRAM([
#ifndef XP_UNIX
#define XP_UNIX 1
#endif
#include <npapi.h>
#include <npruntime.h>
],[
NPString s;
s.UTF8Characters = "Testing";
])],[
    AC_MSG_RESULT([yes])
    AC_DEFINE([NPAPI_USE_UPPERCASE_UTF8],[1],[Define if NPAPI declares NPString with an uppercase UTF8])
],[
    AC_MSG_RESULT([no])
])
AC_LANG_POP([C])
CFLAGS=$oCFLAGS

    
dnl Locate where the plugins should go
PKG_CHECK_MODULES(NSPR, [nspr],[
    libdir=`$PKG_CONFIG --variable=libdir nspr`
    AC_SUBST(libdir)
    if test "$require_nspr" = "yes"; then
      AC_DEFINE([HAVE_NSPR],[1],[Define to 1 if using nspr])
      GECKO_CFLAGS="$GECKO_CFLAGS $NSPR_CFLAGS"
    fi],[if test "$require_nspr" = "yes"; then
      AC_MSG_ERROR([nspr not found, required by detected gecko])
    else
      AC_MSG_WARN([nspr not found, may not be needed])
    fi])


AC_SUBST(GECKO_CFLAGS)
AC_SUBST(GECKO_LIBS)

PKG_CHECK_MODULES(DBUS, [dbus-1 >= 0.95 dbus-glib-1 >= 0.70])
AC_SUBST(DBUS_CFLAGS)
AC_SUBST(DBUS_LIBS)

AC_ARG_WITH([plugin_dir],
    [AS_HELP_STRING([--with-plugin-dir=dir],
        [Directory where plugins are stored])],
        [plugindir=$withval],
        [plugindir='$(libdir)/mozilla/plugins'])
AC_SUBST(plugindir)

AC_ARG_ENABLE(caching,
	AC_HELP_STRING([--disable-caching],[Disable caching of remote media to local storage]),
	[usecache=$enableval],[usecache=yes])

if test $usecache != yes; then
	GECKO_CFLAGS="$GECKO_CFLAGS -DDISABLE_CACHE"
fi

AC_ARG_WITH([libcurl],
    [AS_HELP_STRING([--with-libcurl],
        [Add support for libcurl])],
        [],
        [with_libcurl=check])
AS_IF([test "x$with_libcurl" != xno], 
    [PKG_CHECK_MODULES(CURL,[libcurl],[CURL_DEFINES="-DHAVE_CURL" AC_DEFINE([CURL_ENABLED],[1],[Define to 1 if you have curl support])],AC_MSG_NOTICE([Compiling without curl support. May disable apple.com sites]))
    AC_SUBST(CURL_DEFINES)
    AC_SUBST(CURL_CFLAGS)
    AC_SUBST(CURL_LIBS)
    ])    


BACKEND=`pkg-config --variable=preference_backend gmlib`

if test ${BACKEND} = "gsettings"; then
    AC_MSG_NOTICE([gmlib is using ${BACKEND} for preference storage])
    dnl GLIB_GSETTINGS
    AM_CONDITIONAL([GCONF_SCHEMAS_INSTALL],[false])
    USE_GSETTINGS=1
    AC_SUBST(USE_GSETTINGS)
elif test ${BACKEND} = "gconf"; then
    AC_MSG_NOTICE([gmlib is using ${BACKEND} for preference storage])
    GSETTINGS_RULES=""
    AC_SUBST(GSETTINGS_RULES)
    AM_GCONF_SOURCE_2 
    USE_GCONF=1
    AC_SUBST(USE_GCONF)    
elif test ${BACKEND} = "keystore"; then
    GSETTINGS_RULES=""
    AC_SUBST(GSETTINGS_RULES)
    AM_CONDITIONAL([GCONF_SCHEMAS_INSTALL],[false])
fi


AC_OUTPUT([
Makefile
gecko-mediaplayer.spec
src/Makefile
po/Makefile.in
])

